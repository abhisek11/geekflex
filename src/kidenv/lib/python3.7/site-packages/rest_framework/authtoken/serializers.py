from django.contrib.auth import authenticate
from django.utils.translation import gettext_lazy as _
from rest_framework.exceptions import ValidationError
from rest_framework import serializers
from custom_exception_message import *


class AuthTokenSerializer(serializers.Serializer):
    username = serializers.CharField(label=_("Username"))
    password = serializers.CharField(
        label=_("Password"),
        style={'input_type': 'password'},
        trim_whitespace=False
    )

    def validate(self, attrs):
        username = attrs.get('username')
        password = attrs.get('password')
        print("username",username,'password',password)
        #changes done by abhisek singh 
        if username and password :

            user = authenticate(request=self.context.get('request'),
                                username=username, password=password)

            # The authenticate call simply returns None for is_active=False
            # users. (Assuming the default ModelBackend authentication
            # backend.)
            if not user:
                msg = _('Unable to log in with provided credentials.')
                # raise serializers.ValidationError(msg, code='authorization')
                raise CustomAPIException(None,msg,status_code=status.HTTP_401_UNAUTHORIZED)
                
        else:

            msg = _('Must include "username" and "password".')
            # raise serializers.ValidationError(msg, code='authorization')
            raise ValidationError({
                            "error":{
                            'request_status': 0, 
                            'msg': msg
                            }
                        })
            

        attrs['user'] = user
        return attrs
